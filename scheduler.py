#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

import logging
from datetime import datetime, timedelta
import pytz
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from sqlalchemy import select

from database import async_session_maker, User, Activity
from texts import get_text
from sqlalchemy import update

from constants import TZ
DAILY_REMINDER_HOUR = 9
DAILY_REMINDER_MINUTE = 30

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–æ—Ç–∞ (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
bot = None
scheduler = None

def set_bot(bot_instance):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ"""
    global bot
    bot = bot_instance

async def send_expiration_warning(user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
    try:
        await bot.send_message(
            chat_id=user_id,
            text="‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –°—Ä–æ–∫–∏ –ø–æ –¥–æ–æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é –∑–∞–∫–æ–Ω—á–µ–Ω—ã. –í–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–¥–∞–Ω—ã –≤ –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–ª—É–∂–±—É."
        )
        logger.info(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def check_reminders(bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    async with async_session_maker() as session:
        # –ò—â–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º–∏
        result = await session.execute(
            select(User)
            .where(User.created_at.isnot(None))
        )
        users = result.scalars().all()
        now = datetime.now(TZ)

        for user in users:
            try:
                # –í—ã—á–∏—Å–ª—è–µ–º –¥–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                reg = user.created_at.replace(tzinfo=TZ)
                days_passed = (now.date() - reg.date()).days
                
                # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ 1 –º–∏–Ω—É—Ç–∞, 10, 20, 30 –¥–Ω–∏
                reminder_days = [10, 20, 30]
                
                for rd in reminder_days:
                    if days_passed >= rd:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
                        existing_reminder = await session.execute(
                            select(Activity)
                            .where(
                                Activity.user_id == user.id,
                                Activity.reminder_day == rd,
                                Activity.action_type == "reminder_sent"
                            )
                        )
                        
                        if existing_reminder.scalar_one_or_none() is None:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                            registered = reg.strftime("%d.%m.%Y")
                            remaining = max(0, 30 - days_passed)
                            
                            if rd < 30:
                                text = (
                                    f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–æ–æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏\n\n"
                                    f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registered}\n"
                                    f"–ü—Ä–æ—à–ª–æ –¥–Ω–µ–π: {days_passed}\n"
                                    f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {remaining}\n\n"
                                    f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–π—Ç–∏ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤–æ–≤—Ä–µ–º—è!"
                                )
                                reminder_type = "regular"
                            else:
                                # 30-–π –¥–µ–Ω—å - —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                                text = get_text(user.language, "final_reminder")
                                reminder_type = "final"

                            await bot.send_message(user.tg_id, text)
                            
                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                            reminder_activity = Activity(
                                user_id=user.id,
                                action_type="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
                                action_data=f"{rd} –¥–Ω–µ–π"
                            )
                            session.add(reminder_activity)
                            await session.commit()
                            logger.info(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {rd}-–π –¥–µ–Ω—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.tg_id}")
                            break  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ —Ä–∞–∑
                            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.tg_id}: {e}")

async def cleanup_users_after_31_days(bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ 31 –¥–µ–Ω—å"""
    async with async_session_maker() as session:
        now = datetime.now(TZ)
        cutoff = now - timedelta(days=31)

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –±–æ–ª–µ–µ 31 –¥–Ω—è –Ω–∞–∑–∞–¥
        # –∏ –ø–æ–ª—É—á–∏–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ 30-–π –¥–µ–Ω—å
        result = await session.execute(
            select(User)
            .where(User.created_at < cutoff)
        )
        
        users = result.scalars().all()
        
        for user in users:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ 30-–π –¥–µ–Ω—å
                activity_result = await session.execute(
                    select(Activity)
                    .where(
                        Activity.user_id == user.id,
                        Activity.reminder_day == 30,
                        Activity.is_final_reminder == True
                    )
                )
                
                final_reminder = activity_result.scalar_one_or_none()
                
                # –ï—Å–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏
                if final_reminder:
                    text = get_text(user.language, "bot_liquidation_message")
                    await bot.send_message(user.tg_id, text)
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –±–æ—Ç–∞
                    liquidation_activity = Activity(
                        user_id=user.id,
                        action_type="–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
                        action_data="31 –¥–µ–Ω—å"
                    )
                    session.add(liquidation_activity)
                    await session.commit()
                    logger.info(f"üö´ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.tg_id}")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {user.tg_id}: {e}")

# ====== üîî –†–ê–ë–û–ß–ò–ï –§–£–ù–ö–¶–ò–ò –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô ======

def get_time_text(language: str, time_type: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞"""
    time_texts = {
        "ru": {
            "1m": "1 –º–∏–Ω—É—Ç–∞ –ø—Ä–æ—à–ª–∞",
            "5h": "5 —á–∞—Å–æ–≤ –ø—Ä–æ—à–ª–æ", 
            "10d": "10 –¥–Ω–µ–π –ø—Ä–æ—à–ª–æ",
            "20d": "20 –¥–Ω–µ–π –ø—Ä–æ—à–ª–æ",
            "30d": "30 –¥–Ω–µ–π –ø—Ä–æ—à–ª–æ"
        },
        "uz": {
            "1m": "1 daqiqa o'tdi",
            "5h": "5 soat o'tdi",
            "10d": "10 kun o'tdi",
            "20d": "20 kun o'tdi", 
            "30d": "30 kun o'tdi"
        },
        "zh": {
            "1m": "1 ÂàÜÈíüÂ∑≤Ëøá",
            "5h": "5 Â∞èÊó∂Â∑≤Ëøá",
            "10d": "10 Â§©Â∑≤Ëøá",
            "20d": "20 Â§©Â∑≤Ëøá",
            "30d": "30 Â§©Â∑≤Ëøá"
        },
        "ko": {
            "1m": "1Î∂Ñ Í≤ΩÍ≥º",
            "5h": "5ÏãúÍ∞Ñ Í≤ΩÍ≥º",
            "10d": "10Ïùº Í≤ΩÍ≥º",
            "20d": "20Ïùº Í≤ΩÍ≥º",
            "30d": "30Ïùº Í≤ΩÍ≥º"
        },
        "en": {
            "1m": "1 minute has passed",
            "5h": "5 hours have passed",
            "10d": "10 days have passed",
            "20d": "20 days have passed",
            "30d": "30 days have passed"
        }
    }
    
    return time_texts.get(language, time_texts["ru"]).get(time_type, f"{time_type}")


async def send_regular_reminder(user_id: int, day: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—ã—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (—á–µ—Ä–µ–∑ 5 —á–∞—Å–æ–≤, 10, 20, 30 –¥–Ω–µ–π)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with async_session_maker() as session:
            result = await session.execute(select(User).where(User.tg_id == user_id))
            user = result.scalar_one_or_none()
            if not user:
                logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
                return
            
            language = user.language
            
            # –ï—Å–ª–∏ day = -1, —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É (–¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤)
            if day == -1:
                time_text = get_time_text(language, "1m")
                text = get_text(language, "regular_reminder", days_passed=time_text)
                await bot.send_message(chat_id=user_id, text=text)
                logger.info(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (—è–∑—ã–∫: {language})")
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ activity –∏ –æ—Ç–º–µ—á–∞–µ–º –≤ users
                from database_manager import DatabaseManager
                db_manager = DatabaseManager()
                await db_manager.log_reminder_sent(user_id, -1)
                await db_manager.mark_reminder_sent(user_id, "1m")
            # –ï—Å–ª–∏ day = 0, —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —á–∞—Å–æ–≤ (–¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤)
            elif day == 0:
                time_text = get_time_text(language, "5h")
                text = get_text(language, "regular_reminder", days_passed=time_text)
                await bot.send_message(chat_id=user_id, text=text)
                logger.info(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —á–∞—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (—è–∑—ã–∫: {language})")
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ activity –∏ –æ—Ç–º–µ—á–∞–µ–º –≤ users
                from database_manager import DatabaseManager
                db_manager = DatabaseManager()
                await db_manager.log_reminder_sent(user_id, 0)
                await db_manager.mark_reminder_sent(user_id, "5h")
            else:
                # –î–ª—è –¥–Ω–µ–π (10, 20, 30)
                time_text = get_time_text(language, f"{day}d")
                text = get_text(language, "regular_reminder", days_passed=time_text)
                await bot.send_message(chat_id=user_id, text=text)
                logger.info(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {day} –¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞ —è–∑—ã–∫–µ {language}")
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ activity –∏ –æ—Ç–º–µ—á–∞–µ–º –≤ users
                from database_manager import DatabaseManager
                db_manager = DatabaseManager()
                await db_manager.log_reminder_sent(user_id, day)
                await db_manager.mark_reminder_sent(user_id, f"{day}d")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def send_final_reminder(user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ 30-–π –¥–µ–Ω—å"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with async_session_maker() as session:
            result = await session.execute(select(User).where(User.tg_id == user_id))
            user = result.scalar_one_or_none()
            if not user:
                logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
                return
            
            language = user.language
            text = get_text(language, "final_reminder")
            
            await bot.send_message(chat_id=user_id, text=text)
            logger.info(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞ —è–∑—ã–∫–µ {language}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ activity –∏ –æ—Ç–º–µ—á–∞–µ–º –≤ users
            from database_manager import DatabaseManager
            db_manager = DatabaseManager()
            await db_manager.log_reminder_sent(user_id, 30)
            await db_manager.mark_reminder_sent(user_id, "30d")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def block_user_final(user_id: int):
    """–ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 31-–π –¥–µ–Ω—å"""
    try:
        async with async_session_maker() as session:
            result = await session.execute(select(User).where(User.tg_id == user_id))
            user = result.scalar_one_or_none()
            if not user:
                logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
                return

            user.blocked = True
            await session.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
            language = user.language
            text = get_text(language, "bot_liquidation_message")
            
            await bot.send_message(chat_id=user_id, text=text)
            logger.info(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 31-–π –¥–µ–Ω—å")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ activity
            from database_manager import DatabaseManager
            db_manager = DatabaseManager()
            await db_manager.log_reminder_sent(user_id, 31)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

# ====== üß™ –¢–ï–°–¢–û–í–´–ï –§–£–ù–ö–¶–ò–ò ======

async def send_test_reminder(user_id: int, day: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    try:
        await bot.send_message(
            chat_id=user_id,
            text=f"üìÖ (–¢–ï–°–¢) –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø—Ä–æ—à–ª–æ {day} –¥–Ω–µ–π"
        )
        logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {day} –¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def block_test_user(user_id: int):
    """–¢–µ—Å—Ç–æ–≤–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ 31 –¥–µ–Ω—å"""
    async with async_session_maker() as session:
        result = await session.execute(select(User).where(User.tg_id == user_id))
        user = result.scalar_one_or_none()
        if not user:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            user = User(
                tg_id=user_id,
                username=None,
                language="ru",
                blocked=False
            )
            session.add(user)
            await session.commit()
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")

        user.blocked = True
        await session.commit()

    try:
        await bot.send_message(
            chat_id=user_id,
            text="‚õîÔ∏è (–¢–ï–°–¢) –°—Ä–æ–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç—ë–∫. –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–∫—Ä—ã—Ç."
        )
        logger.info(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

def setup_scheduler(bot_instance):
    global bot, scheduler
    bot = bot_instance
    scheduler = AsyncIOScheduler(timezone=TZ)
    scheduler.add_job(
        check_reminders,
        trigger="cron",
        hour=DAILY_REMINDER_HOUR,
        minute=DAILY_REMINDER_MINUTE,
        args=[bot],
        id="daily_reminders",
        replace_existing=True
    )
    scheduler.add_job(
        cleanup_users_after_31_days,
        trigger="cron",
        hour=23,
        minute=0,
        args=[bot],
        id="cleanup_31",
        replace_existing=True
    )
    scheduler.start()
    logger.info("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
    return scheduler