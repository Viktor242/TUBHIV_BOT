#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª Telegram-–±–æ—Ç–∞ –¥–ª—è –º–∏–≥—Ä–∞–Ω—Ç–æ–≤
–£–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∏–∞–ª–æ–≥–∞–º–∏, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
"""

# from keep_alive import keep_alive
# keep_alive()

import os
import logging
import asyncio
from datetime import datetime, timedelta

import pytz
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from sqlalchemy.exc import IntegrityError
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand, BotCommandScopeDefault, BotCommandScopeAllPrivateChats, BotCommandScopeChat
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from sqlalchemy import select
from dotenv import load_dotenv

from database import init_db, async_session_maker, User, Case, Activity
from texts import (
    CONSENT_TEXT, CONSENT_BUTTON_TEXT, CATEGORY_SELECT_TEXT, RESULT_RECEIVED_TEXT, RESULT_RECEIVED_MESSAGE,
    BUTTONS, INFO_TEXTS, HELP_TEXT, STATUS_TEXT, NO_ACTIVE_CASE, CASE_STOPPED, get_text, TEXTS
)
from scheduler import setup_scheduler

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")
TZ = pytz.timezone(os.getenv("TZ", "Asia/Vladivostok"))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def log_user_action(user_id: int, action_type: str, action_data: str = None, message_text: str = None):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"""
    async with async_session_maker() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute(
                select(User).where(User.tg_id == user_id)
            )
            user = result.scalar_one_or_none()
            
            if user:
                # –í—Å–µ–≥–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
                russian_action_type = get_text("ru", f"action_{action_type}")
                
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
                russian_action_data = None
                if action_data:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è
                    action_data_key = f"action_data_{action_data}"
                    if action_data_key in TEXTS.get("ru", {}):
                        russian_action_data = get_text("ru", action_data_key)
                    else:
                        russian_action_data = action_data
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –¥–µ–π—Å—Ç–≤–∏–∏
                action = Activity(
                    user_id=user.id,
                    action_type=russian_action_type,
                    action_data=russian_action_data,
                    message_text=message_text
                )
                session.add(action)
                await session.commit()
                
                logger.info(f"üìù –î–µ–π—Å—Ç–≤–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ: User {user_id} | {russian_action_type} | {russian_action_data}")
            else:
                logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è {action_type}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "–¥–µ–Ω—å"
def get_day_word(count: int, language: str = "ru") -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ '–¥–µ–Ω—å'"""
    if language == "ru":
        if count == 1:
            return "–¥–µ–Ω—å"
        elif count in [2, 3, 4]:
            return "–¥–Ω—è"
        else:
            return "–¥–Ω–µ–π"
    elif language == "uz":
        return "kun"
    elif language == "zh":
        return "Â§©"
    elif language == "ko":
        return "Ïùº"
    elif language == "en":
        return "day" if count == 1 else "days"
    else:
        return "–¥–µ–Ω—å"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def get_next_reminder_text(days_passed: int, next_reminder: int, language: str = "ru") -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–Ω—è—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –æ —Å–ª–µ–¥—É—é—â–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏"""
    day_word = get_day_word(next_reminder, language)
    
    if days_passed < 5:
        return get_text(language, "next_reminder_5").format(next_reminder=next_reminder, day_word=day_word)
    elif days_passed < 10:
        return get_text(language, "next_reminder_10").format(next_reminder=next_reminder, day_word=day_word)
    elif days_passed < 15:
        return get_text(language, "next_reminder_15").format(next_reminder=next_reminder, day_word=day_word)
    elif days_passed < 20:
        return get_text(language, "next_reminder_20").format(next_reminder=next_reminder, day_word=day_word)
    elif days_passed < 25:
        return get_text(language, "next_reminder_25").format(next_reminder=next_reminder, day_word=day_word)
    elif days_passed < 30:
        return get_text(language, "next_reminder_30").format(next_reminder=next_reminder, day_word=day_word)
    else:
        return get_text(language, "all_reminders_sent")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
def get_language_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
                InlineKeyboardButton(text="üá∫üáø O'zbek", callback_data="lang_uz")
            ],
            [
                InlineKeyboardButton(text="üá®üá≥ ‰∏≠Êñá", callback_data="lang_zh"),
                InlineKeyboardButton(text="üá∞üá∑ ÌïúÍµ≠Ïñ¥", callback_data="lang_ko")
            ],
            [
                InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en")
            ]
        ]
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –¥–∏–∞–≥–Ω–æ–∑–∞
def get_diagnosis_keyboard(language: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∏–∞–≥–Ω–æ–∑–∞"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=get_text(language, "tuberculosis"), callback_data="diag_tuberculosis"),
                InlineKeyboardButton(text=get_text(language, "syphilis"), callback_data="diag_syphilis")
            ],
            [
                InlineKeyboardButton(text=get_text(language, "hiv"), callback_data="diag_hiv"),
                InlineKeyboardButton(text=get_text(language, "drug_addiction"), callback_data="diag_drug_addiction")
            ]
        ]
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–∏–∞–≥–Ω–æ–∑–∞
def get_diagnosis_actions_keyboard(language: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–∏–∞–≥–Ω–æ–∑–∞"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=get_text(language, "show_documents"), callback_data="show_documents"),
                InlineKeyboardButton(text=get_text(language, "understood_10_days"), callback_data="understood_10_days")
            ]
        ]
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
def get_examination_result_keyboard(language: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=get_text(language, "passed_examination"), callback_data="passed_examination"),
                InlineKeyboardButton(text=get_text(language, "not_passed_examination"), callback_data="not_passed_examination")
            ]
        ]
    )

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
async def get_keyboard_for_user(user_tg_id: int) -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with async_session_maker() as session:
        result = await session.execute(
            select(User).where(User.tg_id == user_tg_id)
        )
        user = result.scalar_one_or_none()
        
        language = user.language if user else "ru"
        
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=get_text(language, "start_button"))],
                [KeyboardButton(text=get_text(language, "status_button")), KeyboardButton(text=get_text(language, "help_button"))]
            ],
            resize_keyboard=True
        )


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (Finite State Machine)
class RegistrationStates(StatesGroup):
    waiting_for_language = State()
    waiting_for_consent = State()
    waiting_for_category = State()

class DiagnosisStates(StatesGroup):
    waiting_for_understanding = State()  # –ñ–¥–µ–º "–Ø –ø–æ–Ω—è–ª"
    waiting_for_result = State()         # –ñ–¥–µ–º "–ü—Ä–æ—à–µ–ª/–ù–µ –ø—Ä–æ—à–µ–ª"


@dp.message(CommandStart())
async def cmd_start_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await cmd_start(message, state)


async def show_language_selection(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —è–∑—ã–∫–∞"""
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    logger.info(f"üÜî ID: {user_id} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} | –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ë–î
    await log_user_action(user_id, "bot_started", None, f"Username: {username}")
    
    async with async_session_maker() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        result = await session.execute(
            select(User).where(User.tg_id == user_id)
        )
        user = result.scalar_one_or_none()
        
        is_new_user = False  # –§–ª–∞–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        if not user:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                user = User(
                    tg_id=user_id,
                    username=username
                )
                session.add(user)
                await session.commit()
                is_new_user = True
                logger.info(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ID {user_id} | {username}")
            except IntegrityError:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                await session.rollback()
                logger.info(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ")
                is_new_user = False  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                result = await session.execute(
                    select(User).where(User.tg_id == user_id)
                )
                user = result.scalar_one_or_none()
        else:
            logger.info(f"üîÑ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {user_id} | {username}")
            is_new_user = False  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–ª–∞
            active_cases_result = await session.execute(
                select(Case).where(
                    Case.user_id == user.id,
                    Case.active == True
                )
            )
            active_cases = active_cases_result.scalars().all()
            
            if active_cases:
                # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–ª–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
                latest_case = active_cases[0]
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                now = datetime.now(TZ)
                registered_at = latest_case.registered_at.replace(tzinfo=TZ) if latest_case.registered_at.tzinfo is None else latest_case.registered_at
                deadline_at = latest_case.deadline_at.replace(tzinfo=TZ) if latest_case.deadline_at.tzinfo is None else latest_case.deadline_at
                
                # –°—á–∏—Ç–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –¥–Ω–∏
                registration_date = registered_at.date()
                current_date = now.date()
                days_passed = max(0, (current_date - registration_date).days)
                days_remaining = max(0, (deadline_at - now).days)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                reminder_days = [5, 10, 15, 20, 25, 30]
                next_reminder = None
                for day in reminder_days:
                    if day > latest_case.last_reminder_day:
                        next_reminder = day - days_passed
                        break
                
                if next_reminder is None or next_reminder < 0:
                    next_reminder = 0
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
                registered_str = registered_at.strftime("%d.%m.%Y %H:%M")
                deadline_str = deadline_at.strftime("%d.%m.%Y")
                
                next_reminder_text = get_next_reminder_text(days_passed, next_reminder, user.language)
                status_message = get_text(user.language, "status_text",
                    category=latest_case.category,
                    registered_at=registered_str,
                    days_passed=days_passed,
                    days_remaining=days_remaining,
                    deadline_at=deadline_str,
                    next_reminder_text=next_reminder_text
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –ø–æ–º–æ—â—å—é
                keyboard = await get_keyboard_for_user(user_id)
                await message.answer(status_message, reply_markup=keyboard)
                return
            else:
                # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ª - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ (–Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)
                stopped_cases_result = await session.execute(
                    select(Case).where(
                        Case.user_id == user.id,
                        Case.active == False,
                        Case.completed == False
                    ).order_by(Case.registered_at.desc())
                )
                stopped_cases = stopped_cases_result.scalars().all()
                
                if stopped_cases:
                    # –ï—Å—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–µ–ª–∞ - –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ
                    latest_case = stopped_cases[0]
                    latest_case.active = True
                    await session.commit()
                    
                    logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.tg_id}")
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    now = datetime.now(TZ)
                    registered_at = latest_case.registered_at.replace(tzinfo=TZ) if latest_case.registered_at.tzinfo is None else latest_case.registered_at
                    deadline_at = latest_case.deadline_at.replace(tzinfo=TZ) if latest_case.deadline_at.tzinfo is None else latest_case.deadline_at
                    
                    # –°—á–∏—Ç–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –¥–Ω–∏
                    registration_date = registered_at.date()
                    current_date = now.date()
                    days_passed = max(0, (current_date - registration_date).days)
                    days_remaining = max(0, (deadline_at - now).days)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    reminder_days = [5, 10, 15, 20, 25, 30]
                    next_reminder = None
                    for day in reminder_days:
                        if day > latest_case.last_reminder_day:
                            next_reminder = day - days_passed
                            break
                    
                    if next_reminder is None or next_reminder < 0:
                        next_reminder = 0
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
                    registered_str = registered_at.strftime("%d.%m.%Y %H:%M")
                    deadline_str = deadline_at.strftime("%d.%m.%Y")
                    
                    next_reminder_text = get_next_reminder_text(days_passed, next_reminder, user.language)
                    status_message = f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n{get_text(user.language, 'status_text', category=latest_case.category, registered_at=registered_str, days_passed=days_passed, days_remaining=days_remaining, deadline_at=deadline_str, next_reminder_text=next_reminder_text)}"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –ø–æ–º–æ—â—å—é
                    keyboard = await get_keyboard_for_user(user_id)
                    await message.answer(status_message, reply_markup=keyboard)
                    return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π –∏–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ª - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
    language_kb = get_language_keyboard()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
    if is_new_user:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —è–∑—ã–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        registration_status = get_text("ru", "registered_new")
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —è–∑—ã–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        registration_status = get_text("ru", "registered_existing")
    
    await message.answer(
        f"{get_text('ru', 'your_id', user_id=user_id)}\n{registration_status}\n\n{get_text('ru', 'language_select')}", 
        reply_markup=language_kb
    )
    await state.set_state(RegistrationStates.waiting_for_language)


async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_state = await state.get_state()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ª—é–±–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ
    if current_state in [
        RegistrationStates.waiting_for_language,
        RegistrationStates.waiting_for_consent,
        RegistrationStates.waiting_for_category,
        DiagnosisStates.waiting_for_understanding,
        DiagnosisStates.waiting_for_result
    ]:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞
        await show_language_selection(message, state)
        return
    
    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
    await show_language_selection(message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@dp.callback_query(F.data.startswith("lang_"))
async def process_language_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    language = callback.data.split("_")[1]  # ru, uz, zh, ko, en
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
    await log_user_action(callback.from_user.id, "language_selected", language)
    
    async with async_session_maker() as session:
        # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(User).where(User.tg_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if user:
            user.language = language
            await session.commit()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª —è–∑—ã–∫: {language}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await update_user_commands(callback.from_user.id, language)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    important_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=get_text(language, "understood_month"), callback_data="understood_month")]
        ]
    )
    
    await callback.message.edit_text(
        get_text(language, "important_message"),
        reply_markup=important_kb
    )
    await state.set_state(RegistrationStates.waiting_for_consent)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–Ø –ø–æ–Ω—è–ª –ø—Ä–æ –º–µ—Å—è—Ü"
@dp.callback_query(F.data == "understood_month")
async def process_understood_month(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ –º–µ—Å—è—Ü"""
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await log_user_action(callback.from_user.id, "button_pressed", "understood_month")
    
    async with async_session_maker() as session:
        result = await session.execute(
            select(User).where(User.tg_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        language = user.language if user else "ru"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–∏–∞–≥–Ω–æ–∑–∞
    diagnosis_kb = get_diagnosis_keyboard(language)
    await callback.message.edit_text(
        get_text(language, "diagnosis_found"),
        reply_markup=diagnosis_kb
    )
    await state.set_state(RegistrationStates.waiting_for_category)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∏–∞–≥–Ω–æ–∑–∞
@dp.callback_query(F.data.startswith("diag_"))
async def process_diagnosis_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∏–∞–≥–Ω–æ–∑–∞"""
    diagnosis = callback.data.split("_", 1)[1]  # tuberculosis, syphilis, hiv, drug_addiction
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –¥–∏–∞–≥–Ω–æ–∑–∞
    await log_user_action(callback.from_user.id, "diagnosis_chosen", diagnosis)
    
    async with async_session_maker() as session:
        result = await session.execute(
            select(User).where(User.tg_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        language = user.language if user else "ru"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–≥–Ω–æ–∑–µ
    diagnosis_info = get_text(language, f"{diagnosis}_info")
    actions_kb = get_diagnosis_actions_keyboard(language)
    
    await callback.message.edit_text(
        diagnosis_info,
        reply_markup=actions_kb
    )
    await state.set_state(DiagnosisStates.waiting_for_understanding)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã"
@dp.callback_query(F.data == "show_documents")
async def process_show_documents(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await log_user_action(callback.from_user.id, "button_pressed", "show_documents")
    
    async with async_session_maker() as session:
        result = await session.execute(
            select(User).where(User.tg_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        language = user.language if user else "ru"
    
    await callback.answer(get_text(language, "documents_reminder"), show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–Ø –ø–æ–Ω—è–ª –ø—Ä–æ 10 –¥–Ω–µ–π"
@dp.callback_query(F.data == "understood_10_days")
async def process_understood_10_days(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ 10 –¥–Ω–µ–π"""
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await log_user_action(callback.from_user.id, "button_pressed", "understood_10_days")
    
    async with async_session_maker() as session:
        result = await session.execute(
            select(User).where(User.tg_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        language = user.language if user else "ru"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    result_kb = get_examination_result_keyboard(language)
    await callback.message.edit_text(
        get_text(language, "understood_10_days_examination"),
        reply_markup=result_kb
    )
    await state.set_state(DiagnosisStates.waiting_for_result)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–Ø –ø—Ä–æ—à–µ–ª –¥–æ–æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"
@dp.callback_query(F.data == "passed_examination")
async def process_passed_examination(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await log_user_action(callback.from_user.id, "button_pressed", "passed_examination")
    
    async with async_session_maker() as session:
        result = await session.execute(
            select(User).where(User.tg_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        language = user.language if user else "ru"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–ø—Ä–∞–≤–∫–µ –≤ –õ–æ—Ç–æ—Å
    await callback.message.edit_text(
        get_text(language, "waiting_certificate")
    )
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–Ø –Ω–µ –ø—Ä–æ—à–µ–ª –¥–æ–æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"
@dp.callback_query(F.data == "not_passed_examination")
async def process_not_passed_examination(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await log_user_action(callback.from_user.id, "button_pressed", "not_passed_examination")
    
    async with async_session_maker() as session:
        result = await session.execute(
            select(User).where(User.tg_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        language = user.language if user else "ru"
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–∏–∞–≥–Ω–æ–∑–∞
    diagnosis_kb = get_diagnosis_keyboard(language)
    await callback.message.edit_text(
        get_text(language, "diagnosis_found"),
        reply_markup=diagnosis_kb
    )
    await state.set_state(RegistrationStates.waiting_for_category)


@dp.message(RegistrationStates.waiting_for_consent, F.text == CONSENT_BUTTON_TEXT)
async def process_consent(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö"""
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    categories_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=BUTTONS["–¢—É–±–µ—Ä–∫—É–ª–µ–∑"])],
            [KeyboardButton(text=BUTTONS["–°–∏—Ñ–∏–ª–∏—Å"])],
            [KeyboardButton(text=BUTTONS["–í–ò–ß-–∏–Ω—Ñ–µ–∫—Ü–∏—è"])],
            [KeyboardButton(text=BUTTONS["–ù–∞—Ä–∫–æ–º–∞–Ω–∏—è"])]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        CATEGORY_SELECT_TEXT,
        reply_markup=categories_kb
    )
    await state.set_state(RegistrationStates.waiting_for_category)


@dp.message(RegistrationStates.waiting_for_category)
async def process_category(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–∏–∞–≥–Ω–æ–∑–∞"""
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(User).where(User.tg_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏
        category = None
        for key, value in BUTTONS.items():
            if message.text == value:
                category = key
                break
        
        if not category:
            await message.answer(get_text(user.language, "choose_category"))
            return
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        old_cases_result = await session.execute(
            select(Case).where(
                Case.user_id == user.id,
                Case.category == category,
                Case.active == True
            )
        )
        old_cases = old_cases_result.scalars().all()
        for old_case in old_cases:
            old_case.active = False
        
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
        now = datetime.now(TZ)
        # –°—Ä–æ–∫ 30 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–æ—Ç–µ
        user_created_at = user.created_at.replace(tzinfo=TZ) if user.created_at.tzinfo is None else user.created_at
        deadline = user_created_at + timedelta(days=30)
        
        new_case = Case(
            user_id=user.id,
            category=category,
            registered_at=now,
            deadline_at=deadline,
            last_reminder_day=0,
            active=True
        )
        session.add(new_case)
        await session.commit()
        
        logger.info(f"–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.tg_id}: {category}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–≥–Ω–æ–∑–µ
    await message.answer(INFO_TEXTS[category], reply_markup=ReplyKeyboardRemove())
    
    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –ø–æ–º–æ—â—å—é
    result_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=get_text(user.language, "result_received"))],
            [KeyboardButton(text=get_text(user.language, "status_button")), KeyboardButton(text=get_text(user.language, "help_button"))]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        get_text(user.language, "result_received_message"),
        reply_markup=result_kb
    )
    
    await state.clear()


async def show_registration_status(message: types.Message, user):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_created_at = user.created_at.replace(tzinfo=TZ) if user.created_at.tzinfo is None else user.created_at
    user_registered_str = user_created_at.strftime("%d.%m.%Y %H:%M")
    
    now = datetime.now(TZ)
    # –°—á–∏—Ç–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –¥–Ω–∏ (–µ—Å–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è 16.10, —Ç–æ 16.10 = 0 –¥–Ω–µ–π, 17.10 = 1 –¥–µ–Ω—å)
    registration_date = user_created_at.date()
    current_date = now.date()
    days_since_registration = (current_date - registration_date).days
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è get_text
    if user.language == "ru":
        status_text = (
            "üìä –°–¢–ê–¢–£–° –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò\n\n"
            f"üÜî –í–∞—à ID: {user.tg_id}\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_registered_str}\n"
            f"–ü—Ä–æ—à–ª–æ –¥–Ω–µ–π —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {days_since_registration}"
        )
    elif user.language == "uz":
        status_text = (
            "üìä RO'YXATDAN O'TISH HOLATI\n\n"
            f"üÜî Sizning ID: {user.tg_id}\n"
            f"Ro'yxatdan o'tish sanasi: {user_registered_str}\n"
            f"Ro'yxatdan o'tishdan beri kunlar: {days_since_registration}"
        )
    elif user.language == "zh":
        status_text = (
            "üìä Ê≥®ÂÜåÁä∂ÊÄÅ\n\n"
            f"üÜî ÊÇ®ÁöÑID: {user.tg_id}\n"
            f"Ê≥®ÂÜåÊó•Êúü: {user_registered_str}\n"
            f"Ê≥®ÂÜåÂêéÂ∑≤ËøáÂ§©Êï∞: {days_since_registration}"
        )
    elif user.language == "ko":
        status_text = (
            "üìä Îì±Î°ù ÏÉÅÌÉú\n\n"
            f"üÜî Í∑ÄÌïòÏùò ID: {user.tg_id}\n"
            f"Îì±Î°ù ÎÇ†Ïßú: {user_registered_str}\n"
            f"Îì±Î°ù ÌõÑ Í≤ΩÍ≥º ÏùºÏàò: {days_since_registration}"
        )
    else:  # en
        status_text = (
            "üìä REGISTRATION STATUS\n\n"
            f"üÜî Your ID: {user.tg_id}\n"
            f"Registration date: {user_registered_str}\n"
            f"Days since registration: {days_since_registration}"
        )
    
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª–Ω–æ—Å—Ç—å—é - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç Status
    await message.answer(status_text)


@dp.message(Command("status"))
async def cmd_status(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(User).where(User.tg_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            await message.answer(get_text("ru", "no_active_case"))
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ª—é–±–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ (–±–µ—Ä–µ–º —Å–∞–º–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ, –¥–∞–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ)
        case_result = await session.execute(
            select(Case).where(
                Case.user_id == user.id
            ).order_by(Case.registered_at.desc()).limit(1)
        )
        case = case_result.scalar_one_or_none()
        
        if not case:
            # –ï—Å–ª–∏ –Ω–µ—Ç –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await show_registration_status(message, user)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫
        if case.expired:
            user_created_at = user.created_at.replace(tzinfo=TZ) if user.created_at.tzinfo is None else user.created_at
            user_registered_str = user_created_at.strftime("%d.%m.%Y %H:%M")
            expired_message = get_text(user.language, "expired_status").format(
                user_id=user.tg_id,
                category=case.category,
                registered_at=user_registered_str
            )
            # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª–Ω–æ—Å—Ç—å—é - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç Status
            await message.answer(expired_message)
            return
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        now = datetime.now(TZ)
        user_created_at = user.created_at.replace(tzinfo=TZ) if user.created_at.tzinfo is None else user.created_at
        case_registered_at = case.registered_at.replace(tzinfo=TZ) if case.registered_at.tzinfo is None else case.registered_at
        deadline_at = case.deadline_at.replace(tzinfo=TZ) if case.deadline_at.tzinfo is None else case.deadline_at
        
        # –°—á–∏—Ç–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –¥–Ω–∏
        registration_date = user_created_at.date()
        current_date = now.date()
        days_passed = max(0, (current_date - registration_date).days)
        days_remaining = max(0, (deadline_at - now).days)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        reminder_days = [5, 10, 15, 20, 25, 30]
        next_reminder = None
        for day in reminder_days:
            if day > case.last_reminder_day:
                next_reminder = day - days_passed
                break
        
        if next_reminder is None or next_reminder < 0:
            next_reminder = 0
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        user_registered_str = user_created_at.strftime("%d.%m.%Y %H:%M")  # –î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è
        deadline_str = deadline_at.strftime("%d.%m.%Y")
        
        next_reminder_text = get_next_reminder_text(days_passed, next_reminder, user.language)
        status_message = get_text(user.language, "status_text").format(
            user_id=user.tg_id,
            category=case.category,
            registered_at=user_registered_str,  # –¢–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—É –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è
            days_passed=days_passed,
            days_remaining=days_remaining,
            deadline_at=deadline_str,
            next_reminder_text=next_reminder_text
        )
        
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª–Ω–æ—Å—Ç—å—é - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç Status
    await message.answer(status_message)


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    async with async_session_maker() as session:
        result = await session.execute(
            select(User).where(User.tg_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await message.answer(get_text("ru", "error_occurred"))
            return
            
        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª–Ω–æ—Å—Ç—å—é - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç Help
        await message.answer(get_text(user.language, "help_text"))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
@dp.message(F.text.in_(["üöÄ –°—Ç–∞—Ä—Ç", "üöÄ Boshlash", "üöÄ ÂºÄÂßã", "üöÄ ÏãúÏûë", "üöÄ Start"]))
async def btn_start_multilang(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ä—Ç –Ω–∞ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö"""
    await cmd_start(message, state)


@dp.message(F.text.in_(["üìä –°—Ç–∞—Ç—É—Å", "üìä Holat", "üìä Áä∂ÊÄÅ", "üìä ÏÉÅÌÉú", "üìä Status"]))
async def btn_status_multilang(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ç—É—Å –Ω–∞ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö"""
    await cmd_status(message)


@dp.message(F.text.in_(["‚ùì –ü–æ–º–æ—â—å", "‚ùì Yordam", "‚ùì Â∏ÆÂä©", "‚ùì ÎèÑÏõÄÎßê", "‚ùì Help"]))
async def btn_help_multilang(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ü–æ–º–æ—â—å –Ω–∞ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö"""
    async with async_session_maker() as session:
        result = await session.execute(
            select(User).where(User.tg_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await message.answer(get_text("ru", "error_occurred"))
            return
            
        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª–Ω–æ—Å—Ç—å—é - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç Help
        await message.answer(get_text(user.language, "help_text"))


@dp.message(F.text == RESULT_RECEIVED_TEXT)
async def btn_result_received(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω"""
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(User).where(User.tg_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await message.answer(get_text(user.language, "error_occurred"))
            return
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        cases_result = await session.execute(
            select(Case).where(
                Case.user_id == user.id,
                Case.active == True
            )
        )
        cases = cases_result.scalars().all()
        
        if not cases:
            await message.answer(get_text(user.language, "no_active_examinations"))
            return
        
        for case in cases:
            case.active = False
            case.completed = True  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        
        await session.commit()
        
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.tg_id}")
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    categories_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=BUTTONS["–¢—É–±–µ—Ä–∫—É–ª–µ–∑"])],
            [KeyboardButton(text=BUTTONS["–°–∏—Ñ–∏–ª–∏—Å"])],
            [KeyboardButton(text=BUTTONS["–í–ò–ß-–∏–Ω—Ñ–µ–∫—Ü–∏—è"])],
            [KeyboardButton(text=BUTTONS["–ù–∞—Ä–∫–æ–º–∞–Ω–∏—è"])]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        RESULT_RECEIVED_MESSAGE,
        reply_markup=categories_kb
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await state.set_state(RegistrationStates.waiting_for_category)


async def update_user_commands(user_id: int, language: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ"""
    # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    commands = [
        BotCommand(command="start", description="üöÄ Open menu"),
        BotCommand(command="status", description="üìä Registration status"),
        BotCommand(command="help", description="‚ùì How does the bot work?")
    ]
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.set_my_commands(commands, scope=BotCommandScopeChat(chat_id=user_id))


async def setup_bot_commands():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ"""
    commands = [
        BotCommand(command="start", description="üöÄ Open menu"),
        BotCommand(command="status", description="üìä Registration status"),
        BotCommand(command="help", description="‚ùì How does the bot work?")
    ]
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
    await bot.set_my_commands([])
    
    # –ó–∞—Ç–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ
    await bot.set_my_commands(commands)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await init_db()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = setup_scheduler(bot)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    await setup_bot_commands()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        scheduler.shutdown()
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())

