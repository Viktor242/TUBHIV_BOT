#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
"""

import logging
from datetime import datetime, timedelta
import pytz
from sqlalchemy import select
from database import async_session_maker, User, Activity
from texts import get_text, TEXTS

from constants import TZ

logger = logging.getLogger(__name__)

class DatabaseManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.session_maker = async_session_maker
    
    async def log_user_action(self, user_id: int, action_type: str, action_data: str = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"""
        async with self.session_maker() as session:
            try:
                result = await session.execute(
                    select(User).where(User.tg_id == user_id)
                )
                user = result.scalar_one_or_none()
                
                if user:
                    russian_action_type = get_text("ru", f"action_{action_type}")
                    
                    russian_action_data = None
                    if action_data:
                        action_data_key = f"action_data_{action_data}"
                        if action_data_key in TEXTS.get("ru", {}):
                            russian_action_data = get_text("ru", action_data_key)
                        else:
                            russian_action_data = action_data
                    
                    action = Activity(
                        user_id=user.id,
                        action_type=russian_action_type,
                        action_data=russian_action_data
                    )
                    
                    session.add(action)
                    await session.commit()
                    
                    logger.info(f"üìù –î–µ–π—Å—Ç–≤–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ: User {user_id} | {russian_action_type} | {russian_action_data}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è {action_type}")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    async def get_user_by_tg_id(self, user_tg_id: int):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
        async with self.session_maker() as session:
            result = await session.execute(
                select(User).where(User.tg_id == user_tg_id)
            )
            return result.scalar_one_or_none()
    
    async def update_user_language(self, user_tg_id: int, language: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.session_maker() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–æ–π –∂–µ —Å–µ—Å—Å–∏–∏
            result = await session.execute(
                select(User).where(User.tg_id == user_tg_id)
            )
            user = result.scalar_one_or_none()
            
            if user:
                user.language = language
                await session.commit()
                logger.info(f"–Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_tg_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {language}")
            else:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞")
    
    async def get_user_activity(self, user_id: int):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.session_maker() as session:
            result = await session.execute(
                select(Activity).where(Activity.user_id == user_id).order_by(Activity.timestamp.desc())
            )
            return result.scalars().all()
    
    async def create_user(self, tg_id: int, username: str = None, name: str = None):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.session_maker() as session:
            try:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º deadline —Å—Ä–∞–∑—É –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (30 –¥–Ω–µ–π –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è)
                now = datetime.now(TZ)
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–¥–ª–∞–π–Ω –Ω–∞ –∫–æ–Ω–µ—Ü 30-–≥–æ –¥–Ω—è (23:59:59)
                deadline = now.replace(hour=23, minute=59, second=59, microsecond=999999) + timedelta(days=30)
                
                user = User(
                    tg_id=tg_id,
                    username=username,
                    name=name,  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    language="ru",
                    deadline=deadline
                )
                session.add(user)
                await session.commit()
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {tg_id} —Å deadline: {deadline}")
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
                from scheduler import scheduler, send_regular_reminder, send_final_reminder, block_user_final
                
                # –ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
                scheduler.add_job(
                    send_regular_reminder,
                    "date",
                    run_date=datetime.now(TZ) + timedelta(minutes=1),
                    args=[user.tg_id, -1],  # -1 –æ–∑–Ω–∞—á–∞–µ—Ç "—á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É"
                    id=f"reminder_1m_{user.tg_id}",
                    replace_existing=True
                )
                
                # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —á–∞—Å–æ–≤ (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
                scheduler.add_job(
                    send_regular_reminder,
                    "date",
                    run_date=datetime.now(TZ) + timedelta(hours=5),
                    args=[user.tg_id, 0],  # 0 –æ–∑–Ω–∞—á–∞–µ—Ç "—á–µ—Ä–µ–∑ 5 —á–∞—Å–æ–≤"
                    id=f"reminder_5h_{user.tg_id}",
                    replace_existing=True
                )
                
                # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ 10, 20 –¥–Ω–µ–π
                reminder_days = [10, 20]
                for day in reminder_days:
                    scheduler.add_job(
                        send_regular_reminder,
                        "date",
                        run_date=datetime.now(TZ) + timedelta(days=day),
                        args=[user.tg_id, day],
                        id=f"reminder_{day}_{user.tg_id}",
                        replace_existing=True
                    )
                
                # –§–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ 30-–π –¥–µ–Ω—å
                scheduler.add_job(
                    send_final_reminder,
                    "date",
                    run_date=datetime.now(TZ) + timedelta(days=30),
                    args=[user.tg_id],
                    id=f"final_reminder_{user.tg_id}",
                    replace_existing=True
                )
                
                # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ 31-–π –¥–µ–Ω—å
                scheduler.add_job(
                    block_user_final,
                    "date",
                    run_date=datetime.now(TZ) + timedelta(days=31),
                    args=[user.tg_id],
                    id=f"block_final_{user.tg_id}",
                    replace_existing=True
                )
                
                return user
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}: {e}")
                return None
    
    async def get_user_status(self, user_tg_id: int):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = await self.get_user_by_tg_id(user_tg_id)
        if not user:
            return None
        
        activity = await self.get_user_activity(user.id)
        if not activity:
            return {"user": user, "activity": None}
        
        return {"user": user, "activity": activity[0]}
    
    async def log_reminder_sent(self, user_tg_id: int, reminder_day: int):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ activity"""
        async with self.session_maker() as session:
            try:
                user = await self.get_user_by_tg_id(user_tg_id)
                if not user:
                    logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
                    return False
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                if reminder_day == -1:  # -1 –æ–∑–Ω–∞—á–∞–µ—Ç "—á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É"
                    action_data = "1 –º–∏–Ω—É—Ç–∞"
                elif reminder_day == 0:
                    action_data = "5 —á–∞—Å–æ–≤"
                elif reminder_day == 30:
                    action_data = "30 –¥–Ω–µ–π (—Ñ–∏–Ω–∞–ª—å–Ω–æ–µ)"
                elif reminder_day == 31:
                    action_data = "31 –¥–µ–Ω—å (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)"
                else:
                    action_data = f"{reminder_day} –¥–Ω–µ–π"
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏
                activity = Activity(
                    user_id=user.id,
                    action_type="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
                    action_data=action_data
                )
                
                session.add(activity)
                await session.commit()
                
                logger.info(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {action_data} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_tg_id}")
                return True
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {user_tg_id}: {e}")
                return False
    
    async def mark_reminder_sent(self, user_tg_id: int, reminder_type: str):
        """–û—Ç–º–µ—á–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ users"""
        async with self.session_maker() as session:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–æ–π –∂–µ —Å–µ—Å—Å–∏–∏
                result = await session.execute(
                    select(User).where(User.tg_id == user_tg_id)
                )
                user = result.scalar_one_or_none()
                
                if not user:
                    logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
                    return False
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ –≤ True
                if reminder_type == "1m":
                    user.reminder_1m = True
                elif reminder_type == "5h":
                    user.reminder_5h = True
                elif reminder_type == "10d":
                    user.reminder_10d = True
                elif reminder_type == "20d":
                    user.reminder_20d = True
                elif reminder_type == "30d":
                    user.reminder_30d = True
                else:
                    logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {reminder_type}")
                    return False
                
                await session.commit()
                logger.info(f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_tg_id}")
                return True
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {user_tg_id}: {e}")
                return False
